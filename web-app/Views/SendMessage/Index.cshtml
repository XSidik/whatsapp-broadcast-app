@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Antiforgery
@{
    ViewData["Title"] = "Send Message";
}

<script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>

<div class="container mt-4">
    <h2>Send Message</h2>

    <div class="mb-3">
        <label class="form-check-label me-3">
            <input type="radio" name="messageType" value="single" checked class="form-check-input" onclick="toggleMessageType('single')" /> Single Message
        </label>
        <label class="form-check-label">
            <input type="radio" name="messageType" value="broadcast" class="form-check-input" onclick="toggleMessageType('broadcast')" /> Broadcast Message
        </label>
    </div>

    <!-- Single Message Form -->
    <div id="singleMessageForm">
        <form asp-action="SendMessage" method="post">
            @Html.AntiForgeryToken()
            <div class="mb-3">
                <label for="singleContact">Contact:</label>
                <div x-data="contactSelect()" class="position-relative">
                    <input
                        type="text"
                        x-model="search"
                        x-on:input="fetchContacts"
                        placeholder="Search contact..."
                        class="form-control"
                    />

                    <div x-show="open" class="dropdown-menu show w-100 shadow mt-1" style="max-height: 200px; overflow-y: auto;">
                        <template x-for="contact in contacts" :key="contact.number">
                            <a href="#" class="dropdown-item" x-text="contact.name" x-on:click.prevent="selectContact(contact)"></a>
                        </template>
                        <div x-show="contacts.length === 0" class="dropdown-item disabled">No results</div>
                    </div>

                    <input type="hidden" name="Numbers[0]" :value="selected?.number" />
                    <div class="mt-2" x-show="selected">
                        Selected: <strong x-text="selected.name"></strong>
                    </div>
                </div>
            </div>

            <div class="mb-3">
                <label for="singleMessage">Message:</label>
                <textarea class="form-control" id="singleMessage" name="Message" rows="4" placeholder="Type your message..."></textarea>
            </div>

            <div class="mb-3">
                @* <button type="button" class="btn btn-light">üòä Emoji</button>
                <button type="button" class="btn btn-light">üìé Upload</button>
                <button type="button" class="btn btn-light">üîç Preview</button> *@
            </div>

            <button type="submit" class="btn btn-primary">Send</button>
        </form>
    </div>

    <!-- Broadcast Message Form -->
    <div id="broadcastMessageForm" style="display: none;">
        <div class="mb-3">            
            <div class="container-fluid py-4" x-data="contactSelector()">
                    <div class="row g-3">
                        <!-- Left Side - Available Contacts -->
                        <div class="col-md-6">
                            <div class="border rounded p-3">
                                <div class="search-section">
                                    <h4 class="mb-3">Available Contacts</h4>
                                    
                                    <!-- Search Bar -->
                                    <div class="mb-3">
                                        <div class="input-group">
                                            <input 
                                                type="text" 
                                                class="form-control" 
                                                placeholder="Search contacts..." 
                                                x-model="searchQuery"
                                                x-on:input="searchContacts()"
                                            />
                                            <button class="btn btn-outline-secondary" type="button" x-on:click="clearSearch()">
                                                Clear
                                            </button>
                                        </div>
                                    </div>
                                    
                                    <!-- Loading Indicator -->
                                    <div x-show="loading" class="text-center py-3">
                                        <div class="spinner-border" role="status">
                                            <span class="visually-hidden">Loading...</span>
                                        </div>
                                    </div>
                                    
                                    <!-- Contact List -->
                                    <div class="contact-list" style="max-height: 500px; overflow-y: auto;" x-show="!loading">
                                        <template x-for="contact in allContacts" :key="contact.id">
                                            <div 
                                                class="contact-item card mb-2"
                                                draggable="true"
                                                x-on:dragstart="dragStart($event, contact)"
                                                x-on:dragend="dragEnd($event)"
                                            >
                                                <div class="card-body p-3">
                                                    <div class="d-flex align-items-center">
                                                        <div class="flex-shrink-0">
                                                            <div class="bg-primary text-white rounded-circle d-flex align-items-center justify-content-center" 
                                                                style="width: 40px; height: 40px;">
                                                                <span x-text="contact.name.charAt(0).toUpperCase()"></span>
                                                            </div>
                                                        </div>
                                                        <div class="flex-grow-1 ms-3">
                                                            <h6 class="mb-1" x-text="contact.name"></h6>
                                                            <small class="small" x-text="contact.waNumber"></small>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </template>
                                        
                                        <!-- No Results -->
                                        <div x-show="allContacts.length === 0" class="text-center py-4">
                                            <p class="text-muted">No contacts found</p>
                                        </div>
                                    </div>
                                    
                                    <!-- Pagination -->
                                    <div class="d-flex justify-content-between align-items-center mt-3" x-show="!loading">
                                        <div>
                                            <small class="text-muted">
                                                Showing <span x-text="startIndex + 1"></span> to 
                                                <span x-text="Math.min(startIndex + pageSize, totalItems)"></span> 
                                                of <span x-text="totalItems"></span> contacts
                                            </small>
                                        </div>
                                        <div>
                                            <button 
                                                class="btn btn-sm btn-outline-primary pagination-btn me-2"
                                                x-on:click="previousPage()"
                                                :disabled="currentPage === 1"
                                            >
                                                Previous
                                            </button>
                                            <span class="mx-2">
                                                Page <span x-text="currentPage"></span> of <span x-text="totalPages"></span>
                                            </span>
                                            <button 
                                                class="btn btn-sm btn-outline-primary pagination-btn ms-2"
                                                x-on:click="nextPage()"
                                                :disabled="currentPage === totalPages"
                                            >
                                                Next
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Right Side - Selected Contacts -->
                        <div class="col-md-6">
                            <div class="border rounded p-3">
                                <div class="selected-section">
                                    <div class="d-flex justify-content-between align-items-center mb-3">
                                        <h4>Selected Contacts (<span x-text="selectedContacts.length"></span>)</h4>
                                        <button 
                                            class="btn btn-sm btn-outline-danger"
                                            x-on:click="clearSelected()"
                                            x-show="selectedContacts.length > 0"
                                        >
                                            Clear All
                                        </button>
                                    </div>
                                    
                                    <!-- Drop Zone -->
                                    <div 
                                        class="drop-zone p-3 rounded"
                                        x-on:dragover.prevent="dragOver($event)"
                                        x-on:dragleave="dragLeave($event)"
                                        x-on:drop="drop($event)"
                                        :class="{ 'drag-over': isDragOver }"
                                    >
                                        <!-- Selected Contacts -->
                                        <div x-show="selectedContacts.length > 0">
                                            <div class="row">
                                                <template x-for="contact in selectedContacts" :key="contact.waNumber">
                                                    <div class="col-md-6 mb-3">
                                                        <div class="selected-contact card">
                                                            <button class="remove-btn" x-on:click="removeContact(contact.id)" title="Remove contact">√ó</button>
                                                            <div class="card-body p-3">
                                                                <div class="d-flex align-items-center">
                                                                    <div class="flex-shrink-0">
                                                                        <div class="bg-success text-white rounded-circle d-flex align-items-center justify-content-center" 
                                                                            style="width: 35px; height: 35px;">
                                                                            <span x-text="contact.name.charAt(0).toUpperCase()"></span>
                                                                        </div>
                                                                    </div>
                                                                    <div class="flex-grow-1 ms-3">
                                                                        <h6 class="mb-1 small" x-text="contact.name"></h6>
                                                                        <span class="small d-block" x-text="contact.waNumber"></span>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </template>
                                            </div>
                                        </div>
                                        
                                        <!-- Empty State -->
                                        <div x-show="selectedContacts.length === 0" class="text-center py-5">
                                            <div class="text-muted">
                                                <svg width="48" height="48" class="mb-3 text-secondary" fill="currentColor" viewBox="0 0 16 16">
                                                    <path d="M8 0a8 8 0 1 0 0 16A8 8 0 0 0 8 0ZM4.5 7.5a.5.5 0 0 1 .5-.5h6a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5H5a.5.5 0 0 1-.5-.5v-1Z"/>
                                                </svg>
                                                <p>Drag contacts here to select them</p>
                                                <small>You can drag multiple contacts from the left side</small>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="broadcastMessage">Message:</label>
                        <textarea class="form-control" id="broadcastMessage" name="Message" rows="4" placeholder="Type your message..."></textarea>
                    </div>

                    <div class="mb-3">
                        @* <button type="button" class="btn btn-light">üòä Emoji</button>
                        <button type="button" class="btn btn-light">üìé Upload</button>
                        <button type="button" class="btn btn-light">üîç Preview</button> *@
                    </div>

                    <button class="btn btn-success" x-on:click="sendMessage()">Send to Selected Contacts</button>
                    <!-- Anti-forgery token -->
                    <input type="hidden" name="__RequestVerificationToken" value="@Antiforgery.GetAndStoreTokens(Context).RequestToken" />                
            </div>            
        </div>        
    </div>
</div>

@section Scripts {
    <script>
        function toggleMessageType(type) {
            document.getElementById('singleMessageForm').style.display = type === 'single' ? 'block' : 'none';
            document.getElementById('broadcastMessageForm').style.display = type === 'broadcast' ? 'block' : 'none';
        }

        function toggleSelectAll(source) {
            const checkboxes = document.querySelectorAll('.contact-checkbox');
            checkboxes.forEach(cb => cb.checked = source.checked);
        }

        function contactSelect() {
            return {
                search: '',
                contacts: [],
                selected: null,
                open: false,
                fetchContacts() {
                    if (this.search.length < 1) {
                        this.contacts = [];
                        this.open = false;
                        return;
                    }

                    fetch(`/Contact/Search?filter=${encodeURIComponent(this.search)}`)
                        .then(res => res.json())
                        .then(data => {
                            this.contacts = data;
                            this.open = true;
                        });
                },
                selectContact(contact) {
                    this.selected = contact;
                    this.open = false;
                    this.search = contact.name;
                }
            };
        }
         
        function contactSelector() {
            return {
                allContacts: [],
                selectedContacts: [],
                searchQuery: '',
                totalItems: 0,
                currentPage: 1,
                pageSize: 5,
                loading: false,
                isDragOver: false,
                draggedContact: null,

                async init() {
                    await this.loadContacts();
                },

                async loadContacts() {
                    this.loading = true;
                    try {
                         const params = new URLSearchParams({
                            search: this.searchQuery,
                            page: this.currentPage,
                            pageSize: this.pageSize
                        });
                        
                        const response = await fetch('/Contact/GetContacts?' + params.toString());
                        if (response.ok) {
                            const result = await response.json();
                            this.allContacts = result.items;
                            this.totalItems = result.totalItems;
                        }
                        
                    } catch (error) {
                        console.error('Error loading contacts:', error);                       
                    } finally {
                        this.loading = false;
                    }
                },

                get totalPages() {
                    return Math.ceil(this.totalItems / this.pageSize);
                },

                get startIndex() {
                    return (this.currentPage - 1) * this.pageSize;
                },

                searchContacts() {
                    this.currentPage = 1;
                    this.loadContacts();
                },

                clearSearch() {
                    this.searchQuery = '';
                    this.searchContacts();
                },

                nextPage() {
                    if (this.currentPage < this.totalPages) {
                        this.currentPage++;
                        this.loadContacts();
                    }
                },

                previousPage() {
                    if (this.currentPage > 1) {
                        this.currentPage--;
                        this.loadContacts();
                    }
                },

                dragStart(e, contact) {
                    this.draggedContact = contact;                    
                    e.dataTransfer.effectAllowed = 'copy';
                },

                dragEnd(e) {
                    e.target.classList.remove('dragging');
                    this.draggedContact = null;
                },

                dragOver(e) {
                    e.preventDefault();
                    this.isDragOver = true;
                    e.dataTransfer.dropEffect = 'copy';
                },

                dragLeave(e) {
                    this.isDragOver = false;
                },

                drop(e) {
                    e.preventDefault();
                    if (this.draggedContact) {
                        const exists = this.selectedContacts.some(c => c.id === this.draggedContact.id);
                        if (!exists) {
                            this.selectedContacts.push({ ...this.draggedContact });
                        }
                    }
                },

                removeContact(contactId) {
                    this.selectedContacts = this.selectedContacts.filter(
                        contact => contact.id !== contactId
                    );
                },

                clearSelected() {
                    this.selectedContacts = [];
                },  

                async sendMessage() {                                       
                    const token =  document.querySelector('input[name="__RequestVerificationToken"]').value;
                    
                    const formData = new FormData();
                    formData.append("__RequestVerificationToken", token);
                    formData.append("Message", document.getElementById('broadcastMessage').value);

                    this.selectedContacts.forEach((c, index) => {
                        formData.append(`Numbers[${index}]`, c.waNumber);
                    });

                    try {
                        const response = await fetch('/SendMessage/SendMessage', {
                            method: 'POST',
                            body: formData
                        });

                        console.log("here", response);

                        if (response.redirected) {
                            alert('Send message success!.'); 
                            window.location.href = response.url;
                        } else {
                            const text = await response.text();
                            console.error('Unexpected response:', text);
                            alert('Failed to send message.'); 
                        }
                    } catch (err) {
                        console.error('Error:', err);
                        alert('Error occurred while sending message.');
                    }
                },            
            }
        }

        
    </script>
}
